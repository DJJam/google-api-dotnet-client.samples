//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Google.Apis.Civicinfo.us_v1.Data {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    
    
    /// <summary>Describes information about a regional election administrative area.</summary>
    public class AdministrationRegion {
        
        private AdministrativeBody _electionAdministrationBody;
        
        private string _id;
        
        private AdministrationRegion _local_jurisdiction;
        
        private string _name;
        
        private System.Collections.Generic.IList<Source> _sources;
        
        /// <summary>Information about an election administrative body (e.g. County Board of Elections).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("electionAdministrationBody")]
        public virtual AdministrativeBody ElectionAdministrationBody {
            get {
                return this._electionAdministrationBody;
            }
            set {
                this._electionAdministrationBody = value;
            }
        }
        
        /// <summary>An ID for this object. IDs may change in future requests and should not be cached. Access to this field requires special access that can be requested from the Request more link on the Quotas page.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this._id;
            }
            set {
                this._id = value;
            }
        }
        
        /// <summary>Describes information about a regional election administrative area.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("local_jurisdiction")]
        public virtual AdministrationRegion Local_jurisdiction {
            get {
                return this._local_jurisdiction;
            }
            set {
                this._local_jurisdiction = value;
            }
        }
        
        /// <summary>The name of the jurisdiction.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>A list of sources for this area. If multiple sources are listed the data has been aggregated from those sources.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sources")]
        public virtual System.Collections.Generic.IList<Source> Sources {
            get {
                return this._sources;
            }
            set {
                this._sources = value;
            }
        }
    }
    
    /// <summary>Information about an election administrative body (e.g. County Board of Elections).</summary>
    public class AdministrativeBody {
        
        private string _absenteeVotingInfoUrl;
        
        private string _ballotInfoUrl;
        
        private SimpleAddressType _correspondenceAddress;
        
        private string _electionInfoUrl;
        
        private System.Collections.Generic.IList<ElectionOfficial> _electionOfficials;
        
        private string _electionRegistrationConfirmationUrl;
        
        private string _electionRegistrationUrl;
        
        private string _electionRulesUrl;
        
        private string _hoursOfOperation;
        
        private string _name;
        
        private SimpleAddressType _physicalAddress;
        
        private System.Collections.Generic.IList<string> _voter_services;
        
        private string _votingLocationFinderUrl;
        
        /// <summary>A URL provided by this administrative body for information on absentee voting.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("absenteeVotingInfoUrl")]
        public virtual string AbsenteeVotingInfoUrl {
            get {
                return this._absenteeVotingInfoUrl;
            }
            set {
                this._absenteeVotingInfoUrl = value;
            }
        }
        
        /// <summary>A URL provided by this administrative body to give contest information to the voter.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ballotInfoUrl")]
        public virtual string BallotInfoUrl {
            get {
                return this._ballotInfoUrl;
            }
            set {
                this._ballotInfoUrl = value;
            }
        }
        
        /// <summary>A simple representation of an address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("correspondenceAddress")]
        public virtual SimpleAddressType CorrespondenceAddress {
            get {
                return this._correspondenceAddress;
            }
            set {
                this._correspondenceAddress = value;
            }
        }
        
        /// <summary>A URL provided by this administrative body for looking up general election information.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("electionInfoUrl")]
        public virtual string ElectionInfoUrl {
            get {
                return this._electionInfoUrl;
            }
            set {
                this._electionInfoUrl = value;
            }
        }
        
        /// <summary>The election officials for this election administrative body.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("electionOfficials")]
        public virtual System.Collections.Generic.IList<ElectionOfficial> ElectionOfficials {
            get {
                return this._electionOfficials;
            }
            set {
                this._electionOfficials = value;
            }
        }
        
        /// <summary>A URL provided by this administrative body for confirming that the voter is registered to vote.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("electionRegistrationConfirmationUrl")]
        public virtual string ElectionRegistrationConfirmationUrl {
            get {
                return this._electionRegistrationConfirmationUrl;
            }
            set {
                this._electionRegistrationConfirmationUrl = value;
            }
        }
        
        /// <summary>A URL provided by this administrative body for looking up how to register to vote.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("electionRegistrationUrl")]
        public virtual string ElectionRegistrationUrl {
            get {
                return this._electionRegistrationUrl;
            }
            set {
                this._electionRegistrationUrl = value;
            }
        }
        
        /// <summary>A URL provided by this administrative body describing election rules to the voter.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("electionRulesUrl")]
        public virtual string ElectionRulesUrl {
            get {
                return this._electionRulesUrl;
            }
            set {
                this._electionRulesUrl = value;
            }
        }
        
        /// <summary>A description of the hours of operation for this administrative body.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("hoursOfOperation")]
        public virtual string HoursOfOperation {
            get {
                return this._hoursOfOperation;
            }
            set {
                this._hoursOfOperation = value;
            }
        }
        
        /// <summary>The name of this election administrative body.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>A simple representation of an address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("physicalAddress")]
        public virtual SimpleAddressType PhysicalAddress {
            get {
                return this._physicalAddress;
            }
            set {
                this._physicalAddress = value;
            }
        }
        
        /// <summary>A description of the services this administrative body may provide.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("voter_services")]
        public virtual System.Collections.Generic.IList<string> Voter_services {
            get {
                return this._voter_services;
            }
            set {
                this._voter_services = value;
            }
        }
        
        /// <summary>A URL provided by this administrative body for looking up where to vote.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("votingLocationFinderUrl")]
        public virtual string VotingLocationFinderUrl {
            get {
                return this._votingLocationFinderUrl;
            }
            set {
                this._votingLocationFinderUrl = value;
            }
        }
    }
    
    /// <summary>Information about a candidate running for elected office.</summary>
    public class Candidate {
        
        private string _candidateUrl;
        
        private System.Collections.Generic.IList<Channel> _channels;
        
        private string _email;
        
        private string _name;
        
        private string _orderOnBallot;
        
        private string _party;
        
        private string _phone;
        
        private string _photoUrl;
        
        /// <summary>The URL for the candidate&apos;s campaign web site.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("candidateUrl")]
        public virtual string CandidateUrl {
            get {
                return this._candidateUrl;
            }
            set {
                this._candidateUrl = value;
            }
        }
        
        /// <summary>A list of known (social) media channels for this candidate.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("channels")]
        public virtual System.Collections.Generic.IList<Channel> Channels {
            get {
                return this._channels;
            }
            set {
                this._channels = value;
            }
        }
        
        /// <summary>The email address for the candidate&apos;s campaign.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("email")]
        public virtual string Email {
            get {
                return this._email;
            }
            set {
                this._email = value;
            }
        }
        
        /// <summary>The candidate&apos;s name.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>The order the candidate appears on the ballot for this contest.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("orderOnBallot")]
        public virtual string OrderOnBallot {
            get {
                return this._orderOnBallot;
            }
            set {
                this._orderOnBallot = value;
            }
        }
        
        /// <summary>The full name of the party the candidate is a member of.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("party")]
        public virtual string Party {
            get {
                return this._party;
            }
            set {
                this._party = value;
            }
        }
        
        /// <summary>The voice phone number for the candidate&apos;s campaign office.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("phone")]
        public virtual string Phone {
            get {
                return this._phone;
            }
            set {
                this._phone = value;
            }
        }
        
        /// <summary>A URL for a photo of the candidate.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("photoUrl")]
        public virtual string PhotoUrl {
            get {
                return this._photoUrl;
            }
            set {
                this._photoUrl = value;
            }
        }
    }
    
    /// <summary>A social media or web channel for a candidate.</summary>
    public class Channel {
        
        private string _id;
        
        private string _type;
        
        /// <summary>The unique public identifier for the candidate&apos;s channel.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this._id;
            }
            set {
                this._id = value;
            }
        }
        
        /// <summary>The type of channel. The following is a list of types of channels, but is not exhaustive. More channel types may be added at a later time. One of: GooglePlus, YouTube, Facebook, Twitter</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type {
            get {
                return this._type;
            }
            set {
                this._type = value;
            }
        }
    }
    
    /// <summary>Information about a contest that appears on a voter&apos;s ballot.</summary>
    public class Contest {
        
        private string _ballotPlacement;
        
        private System.Collections.Generic.IList<Candidate> _candidates;
        
        private ElectoralDistrict _district;
        
        private string _electorateSpecifications;
        
        private string _id;
        
        private string _level;
        
        private string _numberElected;
        
        private string _numberVotingFor;
        
        private string _office;
        
        private string _primaryParty;
        
        private string _referendumSubtitle;
        
        private string _referendumTitle;
        
        private string _referendumUrl;
        
        private System.Collections.Generic.IList<Source> _sources;
        
        private string _special;
        
        private string _type;
        
        /// <summary>A number specifying the position of this contest on the voter&apos;s ballot.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ballotPlacement")]
        public virtual string BallotPlacement {
            get {
                return this._ballotPlacement;
            }
            set {
                this._ballotPlacement = value;
            }
        }
        
        /// <summary>The candidate choices for this contest.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("candidates")]
        public virtual System.Collections.Generic.IList<Candidate> Candidates {
            get {
                return this._candidates;
            }
            set {
                this._candidates = value;
            }
        }
        
        /// <summary>Describes the geographic scope of a contest.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("district")]
        public virtual ElectoralDistrict District {
            get {
                return this._district;
            }
            set {
                this._district = value;
            }
        }
        
        /// <summary>A description of any additional eligibility requirements for voting in this contest.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("electorateSpecifications")]
        public virtual string ElectorateSpecifications {
            get {
                return this._electorateSpecifications;
            }
            set {
                this._electorateSpecifications = value;
            }
        }
        
        /// <summary>An ID for this object. IDs may change in future requests and should not be cached. Access to this field requires special access that can be requested from the Request more link on the Quotas page.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this._id;
            }
            set {
                this._id = value;
            }
        }
        
        /// <summary>The level of office for this contest. One of: federal, state, county, city, other</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("level")]
        public virtual string Level {
            get {
                return this._level;
            }
            set {
                this._level = value;
            }
        }
        
        /// <summary>The number of candidates that will be elected to office in this contest.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("numberElected")]
        public virtual string NumberElected {
            get {
                return this._numberElected;
            }
            set {
                this._numberElected = value;
            }
        }
        
        /// <summary>The number of candidates that a voter may vote for in this contest.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("numberVotingFor")]
        public virtual string NumberVotingFor {
            get {
                return this._numberVotingFor;
            }
            set {
                this._numberVotingFor = value;
            }
        }
        
        /// <summary>The name of the office for this contest.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("office")]
        public virtual string Office {
            get {
                return this._office;
            }
            set {
                this._office = value;
            }
        }
        
        /// <summary>If this is a partisan election, the name of the party it is for.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("primaryParty")]
        public virtual string PrimaryParty {
            get {
                return this._primaryParty;
            }
            set {
                this._primaryParty = value;
            }
        }
        
        /// <summary>A brief description of the referendum. This field is only populated for contests of type &apos;Referendum&apos;.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("referendumSubtitle")]
        public virtual string ReferendumSubtitle {
            get {
                return this._referendumSubtitle;
            }
            set {
                this._referendumSubtitle = value;
            }
        }
        
        /// <summary>The title of the referendum. (e.g. &apos;Proposition 42&apos;) This field is only populated for contests of type &apos;Referendum&apos;.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("referendumTitle")]
        public virtual string ReferendumTitle {
            get {
                return this._referendumTitle;
            }
            set {
                this._referendumTitle = value;
            }
        }
        
        /// <summary>A link the referendum. This field is only populated for contests of type &apos;Referendum&apos;.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("referendumUrl")]
        public virtual string ReferendumUrl {
            get {
                return this._referendumUrl;
            }
            set {
                this._referendumUrl = value;
            }
        }
        
        /// <summary>A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sources")]
        public virtual System.Collections.Generic.IList<Source> Sources {
            get {
                return this._sources;
            }
            set {
                this._sources = value;
            }
        }
        
        /// <summary>&quot;Yes&quot; or &quot;No&quot; depending on whether this a contest being held outside the normal election cycle.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("special")]
        public virtual string Special {
            get {
                return this._special;
            }
            set {
                this._special = value;
            }
        }
        
        /// <summary>The type of contest. Usually this will be &apos;General&apos;, &apos;Primary&apos;, or &apos;Run-off&apos; for contests with candidates. For referenda this will be &apos;Referendum&apos;.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type {
            get {
                return this._type;
            }
            set {
                this._type = value;
            }
        }
    }
    
    /// <summary>Information about the election that was queried.</summary>
    public class Election {
        
        private string _electionDay;
        
        private string _id;
        
        private string _name;
        
        /// <summary>Day of the election in YYYY-MM-DD format.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("electionDay")]
        public virtual string ElectionDay {
            get {
                return this._electionDay;
            }
            set {
                this._electionDay = value;
            }
        }
        
        /// <summary>The unique ID of this election.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this._id;
            }
            set {
                this._id = value;
            }
        }
        
        /// <summary>A displayable name for the election.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
    }
    
    /// <summary>Information about individual election officials.</summary>
    public class ElectionOfficial {
        
        private string _emailAddress;
        
        private string _faxNumber;
        
        private string _name;
        
        private string _officePhoneNumber;
        
        private string _title;
        
        /// <summary>The email address of the election official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("emailAddress")]
        public virtual string EmailAddress {
            get {
                return this._emailAddress;
            }
            set {
                this._emailAddress = value;
            }
        }
        
        /// <summary>The fax number of the election official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("faxNumber")]
        public virtual string FaxNumber {
            get {
                return this._faxNumber;
            }
            set {
                this._faxNumber = value;
            }
        }
        
        /// <summary>The full name of the election official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>The office phone number of the election official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("officePhoneNumber")]
        public virtual string OfficePhoneNumber {
            get {
                return this._officePhoneNumber;
            }
            set {
                this._officePhoneNumber = value;
            }
        }
        
        /// <summary>The title of the election official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this._title;
            }
            set {
                this._title = value;
            }
        }
    }
    
    /// <summary>The list of elections available for this version of the API.</summary>
    public class ElectionsQueryResponse : Google.Apis.Requests.IDirectResponseSchema {
        
        private System.Collections.Generic.IList<Election> _elections;
        
        private string _kind;
        
        private string _ETag;
        
        /// <summary>A list of available elections</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("elections")]
        public virtual System.Collections.Generic.IList<Election> Elections {
            get {
                return this._elections;
            }
            set {
                this._elections = value;
            }
        }
        
        /// <summary>The kind, fixed to &quot;civicinfo#electionsQueryResponse&quot;.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this._kind;
            }
            set {
                this._kind = value;
            }
        }
        
        public virtual string ETag {
            get {
                return this._ETag;
            }
            set {
                this._ETag = value;
            }
        }
    }
    
    /// <summary>Describes the geographic scope of a contest.</summary>
    public class ElectoralDistrict {
        
        private string _id;
        
        private string _name;
        
        private string _scope;
        
        /// <summary>An identifier for this district, relative to its scope. For example, the 34th State Senate district would have id &quot;34&quot; and a scope of stateUpper.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this._id;
            }
            set {
                this._id = value;
            }
        }
        
        /// <summary>The name of the district.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>The geographic scope of this district. If unspecified the district&apos;s geography is not known. One of: statewide, congressional, stateUpper, stateLower, countywide, judicial, schoolBoard, cityWide, special</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("scope")]
        public virtual string Scope {
            get {
                return this._scope;
            }
            set {
                this._scope = value;
            }
        }
    }
    
    /// <summary>Describes a political geography.</summary>
    public class GeographicDivision {
        
        private System.Nullable<double> _confidence;
        
        private string _name;
        
        private string _ocdId;
        
        private System.Collections.Generic.IList<Office> _offices;
        
        private string _type;
        
        /// <summary>Numerical value between 0 and 1 that expresses level of confidence that a given district is relevant to the request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("confidence")]
        public virtual System.Nullable<double> Confidence {
            get {
                return this._confidence;
            }
            set {
                this._confidence = value;
            }
        }
        
        /// <summary>The name of the division.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>The unique Open Civic Data identifier for this division.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ocdId")]
        public virtual string OcdId {
            get {
                return this._ocdId;
            }
            set {
                this._ocdId = value;
            }
        }
        
        /// <summary>List of offices elected from this division.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offices")]
        public virtual System.Collections.Generic.IList<Office> Offices {
            get {
                return this._offices;
            }
            set {
                this._offices = value;
            }
        }
        
        /// <summary>The type of this division. If unspecified the division&apos;s geography is not known.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type {
            get {
                return this._type;
            }
            set {
                this._type = value;
            }
        }
    }
    
    /// <summary>Information about an Office held by one or more Officials.</summary>
    public class Office {
        
        private string _name;
        
        private System.Collections.Generic.IList<Official> _officials;
        
        private System.Collections.Generic.IList<Source> _sources;
        
        /// <summary>The human-readable name of the office.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>A list of people who presently hold the office.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("officials")]
        public virtual System.Collections.Generic.IList<Official> Officials {
            get {
                return this._officials;
            }
            set {
                this._officials = value;
            }
        }
        
        /// <summary>A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sources")]
        public virtual System.Collections.Generic.IList<Source> Sources {
            get {
                return this._sources;
            }
            set {
                this._sources = value;
            }
        }
    }
    
    /// <summary>Information about a official holding an elected office.</summary>
    public class Official {
        
        private System.Collections.Generic.IList<SimpleAddressType> _address;
        
        private System.Collections.Generic.IList<Channel> _channels;
        
        private System.Collections.Generic.IList<string> _emails;
        
        private string _id;
        
        private string _name;
        
        private string _party;
        
        private System.Collections.Generic.IList<string> _phones;
        
        private string _photoUrl;
        
        private System.Collections.Generic.IList<string> _urls;
        
        /// <summary>Addresses at which to contact the official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("address")]
        public virtual System.Collections.Generic.IList<SimpleAddressType> Address {
            get {
                return this._address;
            }
            set {
                this._address = value;
            }
        }
        
        /// <summary>A list of known (social) media channels for this official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("channels")]
        public virtual System.Collections.Generic.IList<Channel> Channels {
            get {
                return this._channels;
            }
            set {
                this._channels = value;
            }
        }
        
        /// <summary>The direct email addresses for the official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("emails")]
        public virtual System.Collections.Generic.IList<string> Emails {
            get {
                return this._emails;
            }
            set {
                this._emails = value;
            }
        }
        
        /// <summary>A unique identifier for this official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this._id;
            }
            set {
                this._id = value;
            }
        }
        
        /// <summary>The official&apos;s name.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>The full name of the party the official belongs to.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("party")]
        public virtual string Party {
            get {
                return this._party;
            }
            set {
                this._party = value;
            }
        }
        
        /// <summary>The official&apos;s public contact phone numbers.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("phones")]
        public virtual System.Collections.Generic.IList<string> Phones {
            get {
                return this._phones;
            }
            set {
                this._phones = value;
            }
        }
        
        /// <summary>A URL for a photo of the official.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("photoUrl")]
        public virtual string PhotoUrl {
            get {
                return this._photoUrl;
            }
            set {
                this._photoUrl = value;
            }
        }
        
        /// <summary>The official&apos;s public website URLs.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("urls")]
        public virtual System.Collections.Generic.IList<string> Urls {
            get {
                return this._urls;
            }
            set {
                this._urls = value;
            }
        }
    }
    
    /// <summary>A location where a voter can vote. This may be an early vote site or an election day voting location.</summary>
    public class PollingLocation {
        
        private SimpleAddressType _address;
        
        private string _endDate;
        
        private string _id;
        
        private string _name;
        
        private string _notes;
        
        private string _pollingHours;
        
        private System.Collections.Generic.IList<Source> _sources;
        
        private string _startDate;
        
        private string _voterServices;
        
        /// <summary>A simple representation of an address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("address")]
        public virtual SimpleAddressType Address {
            get {
                return this._address;
            }
            set {
                this._address = value;
            }
        }
        
        /// <summary>The last date that this early vote site may be used. This field is not populated for polling locations.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("endDate")]
        public virtual string EndDate {
            get {
                return this._endDate;
            }
            set {
                this._endDate = value;
            }
        }
        
        /// <summary>An ID for this object. IDs may change in future requests and should not be cached. Access to this field requires special access that can be requested from the Request more link on the Quotas page.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this._id;
            }
            set {
                this._id = value;
            }
        }
        
        /// <summary>The name of the early vote site. This field is not populated for polling locations.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>Notes about this location (e.g. accessibility ramp or entrance to use)</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public virtual string Notes {
            get {
                return this._notes;
            }
            set {
                this._notes = value;
            }
        }
        
        /// <summary>A description of when this location is open.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pollingHours")]
        public virtual string PollingHours {
            get {
                return this._pollingHours;
            }
            set {
                this._pollingHours = value;
            }
        }
        
        /// <summary>A list of sources for this location. If multiple sources are listed the data has been aggregated from those sources.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sources")]
        public virtual System.Collections.Generic.IList<Source> Sources {
            get {
                return this._sources;
            }
            set {
                this._sources = value;
            }
        }
        
        /// <summary>The first date that this early vote site may be used. This field is not populated for polling locations.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("startDate")]
        public virtual string StartDate {
            get {
                return this._startDate;
            }
            set {
                this._startDate = value;
            }
        }
        
        /// <summary>The services provided by this early vote site. This field is not populated for polling locations.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("voterServices")]
        public virtual string VoterServices {
            get {
                return this._voterServices;
            }
            set {
                this._voterServices = value;
            }
        }
    }
    
    /// <summary>A request for political geography and representative information for an address.</summary>
    public class RepresentativeInfoRequest {
        
        private string _address;
        
        [Newtonsoft.Json.JsonPropertyAttribute("address")]
        public virtual string Address {
            get {
                return this._address;
            }
            set {
                this._address = value;
            }
        }
    }
    
    /// <summary>The result of a representative info lookup query.</summary>
    public class RepresentativeInfoResponse : Google.Apis.Requests.IDirectResponseSchema {
        
        private System.Collections.Generic.IList<GeographicDivision> _divisions;
        
        private string _kind;
        
        private SimpleAddressType _normalizedInput;
        
        private System.Collections.Generic.IList<Office> _offices;
        
        private System.Collections.Generic.IList<Official> _officials;
        
        private string _status;
        
        private string _ETag;
        
        /// <summary>Political geographic divisions that contain the requested address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("divisions")]
        public virtual System.Collections.Generic.IList<GeographicDivision> Divisions {
            get {
                return this._divisions;
            }
            set {
                this._divisions = value;
            }
        }
        
        /// <summary>The kind, fixed to &quot;civicinfo#representativeInfoResponse&quot;.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this._kind;
            }
            set {
                this._kind = value;
            }
        }
        
        /// <summary>A simple representation of an address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("normalizedInput")]
        public virtual SimpleAddressType NormalizedInput {
            get {
                return this._normalizedInput;
            }
            set {
                this._normalizedInput = value;
            }
        }
        
        /// <summary>Elected offices referenced by the divisions listed above. Will only be present if &quot;offices&quot; was true in the request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offices")]
        public virtual System.Collections.Generic.IList<Office> Offices {
            get {
                return this._offices;
            }
            set {
                this._offices = value;
            }
        }
        
        /// <summary>Officials holding the offices listed above. Will only be present if &quot;offices&quot; was true in the request.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("officials")]
        public virtual System.Collections.Generic.IList<Official> Officials {
            get {
                return this._officials;
            }
            set {
                this._officials = value;
            }
        }
        
        /// <summary>The result of the request. One of: success, noStreetSegmentFound, addressUnparseable, noAddressParameter, multipleStreetSegmentsFound, electionOver, electionUnknown, internalLookupFailure</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status {
            get {
                return this._status;
            }
            set {
                this._status = value;
            }
        }
        
        public virtual string ETag {
            get {
                return this._ETag;
            }
            set {
                this._ETag = value;
            }
        }
    }
    
    /// <summary>A simple representation of an address.</summary>
    public class SimpleAddressType {
        
        private string _city;
        
        private string _line1;
        
        private string _line2;
        
        private string _line3;
        
        private string _locationName;
        
        private string _state;
        
        private string _zip;
        
        /// <summary>The city or town for the address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("city")]
        public virtual string City {
            get {
                return this._city;
            }
            set {
                this._city = value;
            }
        }
        
        /// <summary>The street name and number of this address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("line1")]
        public virtual string Line1 {
            get {
                return this._line1;
            }
            set {
                this._line1 = value;
            }
        }
        
        /// <summary>The second line the address, if needed.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("line2")]
        public virtual string Line2 {
            get {
                return this._line2;
            }
            set {
                this._line2 = value;
            }
        }
        
        /// <summary>The third line of the address, if needed.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("line3")]
        public virtual string Line3 {
            get {
                return this._line3;
            }
            set {
                this._line3 = value;
            }
        }
        
        /// <summary>The name of the location.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("locationName")]
        public virtual string LocationName {
            get {
                return this._locationName;
            }
            set {
                this._locationName = value;
            }
        }
        
        /// <summary>The US two letter state abbreviation of the address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("state")]
        public virtual string State {
            get {
                return this._state;
            }
            set {
                this._state = value;
            }
        }
        
        /// <summary>The US Postal Zip Code of the address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("zip")]
        public virtual string Zip {
            get {
                return this._zip;
            }
            set {
                this._zip = value;
            }
        }
    }
    
    /// <summary>Contains information about the data source for the element containing it.</summary>
    public class Source {
        
        private string _name;
        
        private System.Nullable<bool> _official;
        
        /// <summary>The name of the data source.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>Whether this data comes from an official government source.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("official")]
        public virtual System.Nullable<bool> Official {
            get {
                return this._official;
            }
            set {
                this._official = value;
            }
        }
    }
    
    /// <summary>A request for information about a voter.</summary>
    public class VoterInfoRequest {
        
        private string _address;
        
        /// <summary>The registered address of the voter to look up.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("address")]
        public virtual string Address {
            get {
                return this._address;
            }
            set {
                this._address = value;
            }
        }
    }
    
    /// <summary>The result of a voter info lookup query.</summary>
    public class VoterInfoResponse : Google.Apis.Requests.IDirectResponseSchema {
        
        private System.Collections.Generic.IList<Contest> _contests;
        
        private System.Collections.Generic.IList<PollingLocation> _earlyVoteSites;
        
        private Election _election;
        
        private string _kind;
        
        private SimpleAddressType _normalizedInput;
        
        private System.Collections.Generic.IList<PollingLocation> _pollingLocations;
        
        private System.Collections.Generic.IList<AdministrationRegion> _state;
        
        private string _status;
        
        private string _ETag;
        
        /// <summary>Contests that will appear on the voter&apos;s ballot</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("contests")]
        public virtual System.Collections.Generic.IList<Contest> Contests {
            get {
                return this._contests;
            }
            set {
                this._contests = value;
            }
        }
        
        /// <summary>Locations where the voter is eligible to vote early, prior to election day</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("earlyVoteSites")]
        public virtual System.Collections.Generic.IList<PollingLocation> EarlyVoteSites {
            get {
                return this._earlyVoteSites;
            }
            set {
                this._earlyVoteSites = value;
            }
        }
        
        /// <summary>Information about the election that was queried.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("election")]
        public virtual Election Election {
            get {
                return this._election;
            }
            set {
                this._election = value;
            }
        }
        
        /// <summary>The kind, fixed to &quot;civicinfo#voterInfoResponse&quot;.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this._kind;
            }
            set {
                this._kind = value;
            }
        }
        
        /// <summary>A simple representation of an address.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("normalizedInput")]
        public virtual SimpleAddressType NormalizedInput {
            get {
                return this._normalizedInput;
            }
            set {
                this._normalizedInput = value;
            }
        }
        
        /// <summary>Locations where the voter is eligible to vote on election day. For states with mail-in voting only, these locations will be nearby drop box locations. Drop box locations are free to the voter and may be used instead of placing the ballot in the mail.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pollingLocations")]
        public virtual System.Collections.Generic.IList<PollingLocation> PollingLocations {
            get {
                return this._pollingLocations;
            }
            set {
                this._pollingLocations = value;
            }
        }
        
        /// <summary>Local Election Information for the state that the voter votes in. For the US, there will only be one element in this array.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("state")]
        public virtual System.Collections.Generic.IList<AdministrationRegion> State {
            get {
                return this._state;
            }
            set {
                this._state = value;
            }
        }
        
        /// <summary>The result of the request. One of: success, noStreetSegmentFound, addressUnparseable, noAddressParameter, multipleStreetSegmentsFound, electionOver, electionUnknown, internalLookupFailure</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status {
            get {
                return this._status;
            }
            set {
                this._status = value;
            }
        }
        
        public virtual string ETag {
            get {
                return this._ETag;
            }
            set {
                this._ETag = value;
            }
        }
    }
}
namespace Google.Apis.Civicinfo.us_v1 {
    using System;
    using System.IO;
    using System.Collections.Generic;
    using Google.Apis;
    using Google.Apis.Discovery;
    
    
    public partial class CivicinfoService : Google.Apis.Services.BaseClientService {
        
        public const string Version = "us_v1";
        
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed = Google.Apis.Discovery.DiscoveryVersion.Version_1_0;
        
        private System.Collections.Generic.IDictionary<string, Google.Apis.Discovery.IParameter> _serviceParameters;
        
        public CivicinfoService(Google.Apis.Services.BaseClientService.Initializer initializer) : 
                base(initializer) {
            this._elections = new ElectionsResource(this, Authenticator);
            this._representatives = new RepresentativesResource(this, Authenticator);
            this.InitParameters();
        }
        
        public CivicinfoService() : 
                this(new Google.Apis.Services.BaseClientService.Initializer()) {
        }
        
        public override System.Collections.Generic.IList<string> Features {
            get {
                return new string[0];
            }
        }
        
        public override string Name {
            get {
                return "civicinfo";
            }
        }
        
        public override string BaseUri {
            get {
                return "https://www.googleapis.com/civicinfo/us_v1/";
            }
        }
        
        public override string BasePath {
            get {
                return "/civicinfo/us_v1/";
            }
        }
        
        public override System.Collections.Generic.IDictionary<string, Google.Apis.Discovery.IParameter> ServiceParameters {
            get {
                return this._serviceParameters;
            }
        }
        
        private void InitParameters() {
            System.Collections.Generic.Dictionary<string, Google.Apis.Discovery.IParameter> parameters = new System.Collections.Generic.Dictionary<string, Google.Apis.Discovery.IParameter>();
            parameters.Add("alt", Google.Apis.Util.Utilities.CreateRuntimeParameter("alt", false, "query", "json", null, new string[] {
                            "json"}));
            parameters.Add("fields", Google.Apis.Util.Utilities.CreateRuntimeParameter("fields", false, "query", null, null, new string[0]));
            parameters.Add("key", Google.Apis.Util.Utilities.CreateRuntimeParameter("key", false, "query", null, null, new string[0]));
            parameters.Add("oauth_token", Google.Apis.Util.Utilities.CreateRuntimeParameter("oauth_token", false, "query", null, null, new string[0]));
            parameters.Add("prettyPrint", Google.Apis.Util.Utilities.CreateRuntimeParameter("prettyPrint", false, "query", "true", null, new string[0]));
            parameters.Add("quotaUser", Google.Apis.Util.Utilities.CreateRuntimeParameter("quotaUser", false, "query", null, null, new string[0]));
            parameters.Add("userIp", Google.Apis.Util.Utilities.CreateRuntimeParameter("userIp", false, "query", null, null, new string[0]));
            this._serviceParameters = new Google.Apis.Util.ReadOnlyDictionary<string, Google.Apis.Discovery.IParameter>(parameters);
        }
    }
    
    public class ElectionsResource {
        
        private CivicinfoService service;
        
        private Google.Apis.Authentication.IAuthenticator authenticator;
        
        private const string Resource = "elections";
        
        public ElectionsResource(CivicinfoService service, Google.Apis.Authentication.IAuthenticator authenticator) {
            this.service = service;
            this.authenticator = authenticator;
        }
        
        /// <summary>List of available elections to query.</summary>
        public virtual ElectionQueryRequest ElectionQuery() {
            return new ElectionQueryRequest(service);
        }
        
        /// <summary>Looks up information relevant to a voter based on the voter&apos;s registered address.</summary>
        /// <param name="electionId">Required - The unique ID of the election to look up. A list of election IDs can be obtained at.https://www.googleapis.com/civicinfo/{version}/elections</param>
        public virtual VoterInfoQueryRequest VoterInfoQuery(Google.Apis.Civicinfo.us_v1.Data.VoterInfoRequest body, string electionId) {
            return new VoterInfoQueryRequest(service, body, electionId);
        }
        
        public class ElectionQueryRequest : Google.Apis.Requests.ClientServiceRequest<Google.Apis.Civicinfo.us_v1.Data.ElectionsQueryResponse> {
            
            private string _alt;
            
            private string _fields;
            
            private string _oauth_token;
            
            private System.Nullable<bool> _prettyPrint;
            
            private string _quotaUser;
            
            private string _userIp;
            
            public ElectionQueryRequest(Google.Apis.Services.IClientService service) : 
                    base(service) {
                this.InitParameters();
            }
            
            /// <summary>Data format for the response.</summary>
            [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Alt {
                get {
                    return this._alt;
                }
                set {
                    this._alt = value;
                }
            }
            
            /// <summary>Selector specifying which fields to include in a partial response.</summary>
            [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Fields {
                get {
                    return this._fields;
                }
                set {
                    this._fields = value;
                }
            }
            
            /// <summary>OAuth 2.0 token for the current user.</summary>
            [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Oauth_token {
                get {
                    return this._oauth_token;
                }
                set {
                    this._oauth_token = value;
                }
            }
            
            /// <summary>Returns response with indentations and line breaks.</summary>
            [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<bool> PrettyPrint {
                get {
                    return this._prettyPrint;
                }
                set {
                    this._prettyPrint = value;
                }
            }
            
            /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</summary>
            [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string QuotaUser {
                get {
                    return this._quotaUser;
                }
                set {
                    this._quotaUser = value;
                }
            }
            
            /// <summary>IP address of the site where the request originates. Use this if you want to enforce per-user limits.</summary>
            [Google.Apis.Util.RequestParameterAttribute("userIp", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string UserIp {
                get {
                    return this._userIp;
                }
                set {
                    this._userIp = value;
                }
            }
            
            public override string MethodName {
                get {
                    return "electionQuery";
                }
            }
            
            public override string HttpMethod {
                get {
                    return "GET";
                }
            }
            
            public override string RestPath {
                get {
                    return "elections";
                }
            }
            
            private void InitParameters() {
                System.Collections.Generic.Dictionary<string, Google.Apis.Discovery.IParameter> parameters = new System.Collections.Generic.Dictionary<string, Google.Apis.Discovery.IParameter>();
                this._requestParameters = new Google.Apis.Util.ReadOnlyDictionary<string, Google.Apis.Discovery.IParameter>(parameters);
            }
        }
        
        public class VoterInfoQueryRequest : Google.Apis.Requests.ClientServiceRequest<Google.Apis.Civicinfo.us_v1.Data.VoterInfoResponse> {
            
            private string _alt;
            
            private string _fields;
            
            private string _oauth_token;
            
            private System.Nullable<bool> _prettyPrint;
            
            private string _quotaUser;
            
            private string _userIp;
            
            private string _electionId;
            
            private System.Nullable<bool> _officialOnly;
            
            private Google.Apis.Civicinfo.us_v1.Data.VoterInfoRequest _Body;
            
            public VoterInfoQueryRequest(Google.Apis.Services.IClientService service, Google.Apis.Civicinfo.us_v1.Data.VoterInfoRequest body, string electionId) : 
                    base(service) {
                this.Body = body;
                this._electionId = electionId;
                this.InitParameters();
            }
            
            /// <summary>Data format for the response.</summary>
            [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Alt {
                get {
                    return this._alt;
                }
                set {
                    this._alt = value;
                }
            }
            
            /// <summary>Selector specifying which fields to include in a partial response.</summary>
            [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Fields {
                get {
                    return this._fields;
                }
                set {
                    this._fields = value;
                }
            }
            
            /// <summary>OAuth 2.0 token for the current user.</summary>
            [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Oauth_token {
                get {
                    return this._oauth_token;
                }
                set {
                    this._oauth_token = value;
                }
            }
            
            /// <summary>Returns response with indentations and line breaks.</summary>
            [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<bool> PrettyPrint {
                get {
                    return this._prettyPrint;
                }
                set {
                    this._prettyPrint = value;
                }
            }
            
            /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</summary>
            [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string QuotaUser {
                get {
                    return this._quotaUser;
                }
                set {
                    this._quotaUser = value;
                }
            }
            
            /// <summary>IP address of the site where the request originates. Use this if you want to enforce per-user limits.</summary>
            [Google.Apis.Util.RequestParameterAttribute("userIp", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string UserIp {
                get {
                    return this._userIp;
                }
                set {
                    this._userIp = value;
                }
            }
            
            /// <summary>The unique ID of the election to look up. A list of election IDs can be obtained at.https://www.googleapis.com/civicinfo/{version}/elections</summary>
            [Google.Apis.Util.RequestParameterAttribute("electionId", Google.Apis.Util.RequestParameterType.Path)]
            public virtual string ElectionId {
                get {
                    return this._electionId;
                }
            }
            
            /// <summary>If set to true, only data from official state sources will be returned.</summary>
            [Google.Apis.Util.RequestParameterAttribute("officialOnly", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<bool> OfficialOnly {
                get {
                    return this._officialOnly;
                }
                set {
                    this._officialOnly = value;
                }
            }
            
            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Google.Apis.Civicinfo.us_v1.Data.VoterInfoRequest Body {
                get {
                    return this._Body;
                }
                set {
                    this._Body = value;
                }
            }
            
            public override string MethodName {
                get {
                    return "voterInfoQuery";
                }
            }
            
            public override string HttpMethod {
                get {
                    return "POST";
                }
            }
            
            public override string RestPath {
                get {
                    return "voterinfo/{electionId}/lookup";
                }
            }
            
            protected override object GetBody() {
                return this.Body;
            }
            
            private void InitParameters() {
                System.Collections.Generic.Dictionary<string, Google.Apis.Discovery.IParameter> parameters = new System.Collections.Generic.Dictionary<string, Google.Apis.Discovery.IParameter>();
                parameters.Add("electionId", Google.Apis.Util.Utilities.CreateRuntimeParameter("electionId", true, "path", null, null, new string[0]));
                parameters.Add("officialOnly", Google.Apis.Util.Utilities.CreateRuntimeParameter("officialOnly", false, "query", "false", null, new string[0]));
                this._requestParameters = new Google.Apis.Util.ReadOnlyDictionary<string, Google.Apis.Discovery.IParameter>(parameters);
            }
        }
    }
    
    public class RepresentativesResource {
        
        private CivicinfoService service;
        
        private Google.Apis.Authentication.IAuthenticator authenticator;
        
        private const string Resource = "representatives";
        
        public RepresentativesResource(CivicinfoService service, Google.Apis.Authentication.IAuthenticator authenticator) {
            this.service = service;
            this.authenticator = authenticator;
        }
        
        /// <summary>Looks up political geography and (optionally) representative information based on an address.</summary>
        public virtual RepresentativeInfoQueryRequest RepresentativeInfoQuery(Google.Apis.Civicinfo.us_v1.Data.RepresentativeInfoRequest body) {
            return new RepresentativeInfoQueryRequest(service, body);
        }
        
        public class RepresentativeInfoQueryRequest : Google.Apis.Requests.ClientServiceRequest<Google.Apis.Civicinfo.us_v1.Data.RepresentativeInfoResponse> {
            
            private string _alt;
            
            private string _fields;
            
            private string _oauth_token;
            
            private System.Nullable<bool> _prettyPrint;
            
            private string _quotaUser;
            
            private string _userIp;
            
            private System.Nullable<bool> _includeOffices;
            
            private Google.Apis.Civicinfo.us_v1.Data.RepresentativeInfoRequest _Body;
            
            public RepresentativeInfoQueryRequest(Google.Apis.Services.IClientService service, Google.Apis.Civicinfo.us_v1.Data.RepresentativeInfoRequest body) : 
                    base(service) {
                this.Body = body;
                this.InitParameters();
            }
            
            /// <summary>Data format for the response.</summary>
            [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Alt {
                get {
                    return this._alt;
                }
                set {
                    this._alt = value;
                }
            }
            
            /// <summary>Selector specifying which fields to include in a partial response.</summary>
            [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Fields {
                get {
                    return this._fields;
                }
                set {
                    this._fields = value;
                }
            }
            
            /// <summary>OAuth 2.0 token for the current user.</summary>
            [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string Oauth_token {
                get {
                    return this._oauth_token;
                }
                set {
                    this._oauth_token = value;
                }
            }
            
            /// <summary>Returns response with indentations and line breaks.</summary>
            [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<bool> PrettyPrint {
                get {
                    return this._prettyPrint;
                }
                set {
                    this._prettyPrint = value;
                }
            }
            
            /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</summary>
            [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string QuotaUser {
                get {
                    return this._quotaUser;
                }
                set {
                    this._quotaUser = value;
                }
            }
            
            /// <summary>IP address of the site where the request originates. Use this if you want to enforce per-user limits.</summary>
            [Google.Apis.Util.RequestParameterAttribute("userIp", Google.Apis.Util.RequestParameterType.Query)]
            public virtual string UserIp {
                get {
                    return this._userIp;
                }
                set {
                    this._userIp = value;
                }
            }
            
            /// <summary>Whether to return information about offices and officials. If false, only the top-level district information will be returned.</summary>
            [Google.Apis.Util.RequestParameterAttribute("includeOffices", Google.Apis.Util.RequestParameterType.Query)]
            public virtual System.Nullable<bool> IncludeOffices {
                get {
                    return this._includeOffices;
                }
                set {
                    this._includeOffices = value;
                }
            }
            
            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Google.Apis.Civicinfo.us_v1.Data.RepresentativeInfoRequest Body {
                get {
                    return this._Body;
                }
                set {
                    this._Body = value;
                }
            }
            
            public override string MethodName {
                get {
                    return "representativeInfoQuery";
                }
            }
            
            public override string HttpMethod {
                get {
                    return "POST";
                }
            }
            
            public override string RestPath {
                get {
                    return "representatives/lookup";
                }
            }
            
            protected override object GetBody() {
                return this.Body;
            }
            
            private void InitParameters() {
                System.Collections.Generic.Dictionary<string, Google.Apis.Discovery.IParameter> parameters = new System.Collections.Generic.Dictionary<string, Google.Apis.Discovery.IParameter>();
                parameters.Add("includeOffices", Google.Apis.Util.Utilities.CreateRuntimeParameter("includeOffices", false, "query", "true", null, new string[0]));
                this._requestParameters = new Google.Apis.Util.ReadOnlyDictionary<string, Google.Apis.Discovery.IParameter>(parameters);
            }
        }
    }
    
    public partial class CivicinfoService {
        
        private const string Resource = "";
        
        private ElectionsResource _elections;
        
        private RepresentativesResource _representatives;
        
        private Google.Apis.Services.IClientService service {
            get {
                return this;
            }
        }
        
        public virtual ElectionsResource Elections {
            get {
                return this._elections;
            }
        }
        
        public virtual RepresentativesResource Representatives {
            get {
                return this._representatives;
            }
        }
    }
}
